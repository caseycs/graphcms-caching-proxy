proxy_cache_path /tmp/nginx-cache levels=1:2 keys_zone=graphcms:10m max_size=10m
                 inactive=24h use_temp_path=off;

server {
  listen      80 default_server;
  server_name _;

  location / {

    # Preflighted requests
    if ($request_method = OPTIONS ) {
      add_header "Access-Control-Allow-Origin"  *;
      add_header "Access-Control-Allow-Methods" "GET,HEAD,PUT,PATCH,POST,DELETE";
      add_header "Access-Control-Allow-Headers" "content-type";
      return 204;
    }

    lua_need_request_body on;

    set $req_hash "";

    rewrite_by_lua_block {
      local function emptyIfNil(s)
        if s == nil then
          return ""
        end
        return s
      end

      local md5 = require 'md5'
      local req = ngx.req.get_method() .. "|" .. ngx.var.uri .. "|" .. emptyIfNil(ngx.req.get_body_data())
      ngx.var.req_hash   = md5.sumhexa(req)
    }

    proxy_http_version 1.1;

    proxy_ssl_server_name on;

    proxy_cache_key $req_hash;
    proxy_cache_methods POST;
    proxy_cache graphcms;
    proxy_cache_min_uses 1;
    proxy_cache_valid 200 __PROXY_CACHE_VALID__;

    # Designed to work only for public read-only endpoints.
    proxy_set_header cookie "";
    proxy_set_header authorization "";

    add_header X-Cached $upstream_cache_status;
    add_header X-Key $req_hash;

    proxy_pass __ENDPOINT__;
  }

  location /purge {
    set $lua_purge_path "/tmp/nginx-cache";
    content_by_lua_file /etc/nginx/purge.lua;
  }
}
